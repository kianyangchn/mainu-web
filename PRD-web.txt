Product Requirements Document: “mainu Web” (V1)
Version: 0.9 Draft
Date: April 27, 2026
Status: Draft for Review

Document History
Version    Date           Author      Changes
0.9 Draft  April 27 2026  [Your Name] First web-focused draft based on native MVP reference

0. Executive Summary
International travelers still face “Menu Anxiety” when they encounter foreign-language menus. The existing mobile experience proves the value of a capture → translate → share → order loop. mainu Web extends that loop to mobile browsers first so travelers can capture, translate, and share menus directly from the phones already in their hands, while still supporting tablets or desktops when needed. The web MVP delivers parity with the native V1 core flow—multi-page capture, AI-powered translation, interactive menu browsing, collaborative cart, and waiter-ready summary—optimized for mobile-responsive delivery. Success means validating that the browser experience can onboard travelers quickly during on-the-go moments, maintain the “magical” menu transformation, and boost group participation rates from handheld devices.

1. Vision & The Problem
Vision: Make every restaurant menu instantly understandable and shareable on the web, regardless of language or device.
Problem Statement: Planners who coordinate dining abroad often rely on their phones while navigating unfamiliar cities or dining rooms. Without a mobile-friendly web experience they must bounce between screenshots, messaging threads, and translation apps. The same pain points persist: slow interpretation, lack of context, social friction, and ordering errors.

2. Strategic Goals & Success Metrics (Web V1 OKRs)
Objective: Replicate the mobile “Menu Anxiety” solution in a performant, accessible web experience that increases group participation.
Key Result   Measurement
KR1: Adoption Achieve 15,000 Monthly Active Web Planners within 90 days of launch and activate 40% of existing mobile planners on web.
KR2: Speed    P90 end-to-end processing latency < 60 seconds measured from upload/capture to rendered menu.
KR3: Delight  Maintain CSAT ≥ 4.5/5 on first-session survey and Net Promoter Score ≥ 30.
KR4: Engagement Average of 2.0 unique viewers per shared menu and 70% of viewers spend ≥90 seconds in the menu.
KR5: Reliability <1% upload/processing error rate and 99.5% uptime across web services.

3. Target Audience & Persona
Primary Persona — Alex the Planner (32): Tech-forward traveler who orchestrates group dining itineraries. Needs to snap photos and translate menus from their phone browser while moving between venues, with optional follow-up on larger screens when available.
Secondary Persona — Jamie the Remote Diner (29): Receives a shared link, reviews dishes on their phone browser, and communicates preferences before arrival. Needs lightweight, install-free access that feels native on mobile.

4. V1 Scope: MVP Features (Capture → Understand → Share → Decide → Order)
1. Multi-Page Menu Capture & Upload
   - As Alex, I can upload or capture multiple menu photos from a browser so mainu has full context.
   - Strategic Rationale: Mirrors native capture coordinator; ensures parity for multi-page menus.
2. AI Menu Processing Pipeline
   - As Alex, I submit captured menu photos and receive a structured, translated menu with contextual descriptions and dish imagery generated by a multimodal LLM.
   - Strategic Rationale: Keeps the core value proposition beyond word-for-word translation while avoiding bespoke OCR maintenance.
3. Responsive Interactive Menu
   - As Alex or Jamie, I browse a two-level menu (sections → dishes) with dish metadata, pricing, allergens, spice indicators, and recommendations.
   - Strategic Rationale: Aligns with InteractiveMenu module behavior while optimizing for mobile and desktop browsers.
4. Group Order Cart
   - As Alex, I add or adjust dish quantities from the menu, keeping a single source of truth for the order.
   - Strategic Rationale: Matches OrderCart flow, reducing friction before speaking to waitstaff.
5. Ready-to-Order Summary
   - As Alex, I generate a linguistically appropriate summary with original dish names to show the waiter or share via messaging.
   - Strategic Rationale: Mirrors the native ReadyToOrder view to eliminate ordering mistakes.
6. One-Tap Sharing & Read-Only Viewer
   - As Alex, I create a short-lived share link; as Jamie, I open the menu without installing an app.
   - Strategic Rationale: Solves “pass the phone” problem, drives virality, keeps planner in control.

Future Roadmap (Out of Scope for V1)
- Offline caching for processed menus.
- Dietary filters and preference tagging.
- Collaborative editing or chat within the menu.
- Payment or bill splitting workflows.
- Waitstaff communication phrasebook.

5. User Experience & Design Principles
- Mobile Primary: Layout is optimized for small screens with thumb-friendly controls and lightweight assets, and scales responsively for tablets or desktops when available.
- Clarity & Focus: Use stacked section navigation with sticky headers on mobile; expand to two-column views only on wide viewports without sacrificing readability.
- Touch-Friendly Interactions: Large tap targets, gesture-aware scrolling, and subtle motion feedback tuned for handheld use.
- Guided Capture: Clear instructions, drag-and-drop areas, file size limits, and photo quality tips that highlight on-device camera best practices.
- Planner Control: Editing rights restricted to the session owner; viewers remain read-only.
- Accessibility: Meet WCAG 2.1 AA with keyboard navigation, screen-reader semantics, and localized copy.
- Transparency: Provide processing status, estimated time, and explicit error messages for capture or AI failures.

6. Detailed User Flows
Planner Flow: Start session → upload/capture menu pages → reorder or delete previews → submit for processing → view loading state with progress → review interactive menu → build order cart → generate share link → copy waiter summary.
Viewer Flow: Receive share URL → open read-only interactive menu → browse sections and dishes → optionally flag favorites (future) → communicate selections to planner offline.

7. Functional Requirements
Capture & Upload
- Accept JPEG, HEIC, and PNG images up to 10 MB each; support drag-and-drop and MediaDevices camera capture with fallback to upload.
- Perform client-side compression, EXIF orientation correction, and basic readability scoring before submission.

Menu Processing
- Submit images to the multimodal LLM API, receiving structured MenuTemplate JSON with translations, dish attributes, and imagery references.
- Provide real-time or periodic status updates (polling every 3 seconds; optional Server-Sent Events/WebSocket).

Interactive Menu
- Render MenuTemplate sections and dishes with virtualization for large menus; replicate metadata surfaces from MenuDishRow.
- Provide dish detail modal/sheet with price, description, allergens, spice level, and recommended pairings.

Order Cart
- Persist selections in browser localStorage scoped to session until template expires or planner resets.
- Offer quantity steppers, total item count, and live waiter summary preview.

Share Links
- Generate 24-hour share URLs backed by server-managed tokens stored in the Python app; enforce expiration and revoke on reset.
- Track analytics events for share creation and viewer sessions.

Analytics & Telemetry
- Events: upload_started, upload_failed, menu_processed, share_created, viewer_session_started, order_summary_generated.
- Capture front-end latency metrics (upload time, processing time, render duration) and report to analytics stack.

8. Technical Architecture & Requirements
Application Stack
- Single Python (FastAPI or Django) web application serving server-rendered templates (Jinja2) augmented with HTMX/Alpine.js for interactive behaviors, keeping payloads light for mobile users.
- Reuse shared design tokens through a Tailwind/utility CSS pipeline baked into the Python build; register a service worker for caching shell assets and icons.

Processing & APIs
- Wrap the multimodal LLM API (e.g., GPT-4o mini vision) behind Python routes (/web/upload, /web/status, /web/share/<token>) that manage prompt construction, retries, and rate limits.
- Queue menu processing jobs within the Python service (Celery/RQ) when workloads spike; optional SSE/WebSocket endpoints provide live status with polling fallback.

Session & State
- Maintain planner sessions with HTTP-only cookies backed by server-side storage (Redis/PostgreSQL on Railway), avoiding JWT handling entirely.
- Store uploaded images in temporary object storage (auto-delete after processing); persist MenuTemplate JSON for share duration only.

Security & Compliance
- Enforce HTTPS, CORS restrictions, CSRF protection, and rate limiting via Python middleware.
- Purge uploaded images after processing complete; expire share links and associated templates after TTL.
- Maintain GDPR compliance; surface privacy notice about image processing.

Performance Targets
- Initial HTML + CSS + JS payload ≤ 150 KB gzipped to accommodate mobile networks; progressively enhance capture utilities as needed.
- P90 processing latency ≤ 60 seconds including upload and AI response.
- Optimize image transfers with client-side compression and resumable uploads for unreliable mobile connections.

Reliability
- Instrument background job queues and LLM API availability; provide user-facing retry guidance and automatic backoff for transient failures.
- Configure structured logging and health checks within the Python app for Railway monitoring.

Deployment & Operations
- Primary deployment on Railway using a single Python service (Dockerfile or buildpack) with auto-builds from main; configure staging + production environments.
- Provision Railway-managed PostgreSQL/Redis add-ons for session storage and background jobs; manage secrets via Railway variables.
- Set up Railway cron tasks or worker service for periodic clean-up of expired share tokens and storage objects.

9. Success Measurement & Analytics
- Funnel tracking for capture → processing → menu render → share creation → viewer sessions → order summary.
- Cross-channel retention: % of mobile planners who adopt web; % of web planners who continue to native capture.
- In-product survey (first successful loop) for qualitative insights.
- Centralized logging/observability for client and server errors.

10. Risks, Assumptions, Dependencies
Risks
- Browser camera quality varies widely; poor images degrade LLM extraction accuracy. Mitigate with guidance, quality checks, and encouraging photo uploads from higher-quality devices.
- Increased AI usage may raise operating costs. Mitigate with caching, prompt optimization, and partner pricing.
- Network latency in hotels or travel environments may slow uploads. Mitigate with client compression and visible progress indicators.
- Privacy concerns about uploading menus. Mitigate with clear messaging and short retention windows.

Assumptions
- Users have stable internet while capturing or uploading menus.
- Modern browsers (Chrome, Safari, Edge, Firefox) are primary targets; legacy support is limited to read-only viewing.

Dependencies
- Multimodal LLM API access, object storage, analytics stack, and server-side session storage (Redis/PostgreSQL on Railway).

11. Future Roadmap (Post V1)
- Offline-ready viewer with QR handoff to mobile.
- Dietary filters and personal preference tagging.
- Collaborative annotations or polls for group decision-making.
- Payment integrations and bill splitting.
- Waitstaff communication phrasebook with audio playback.

12. Release Criteria (Definition of Done)
- V1 features functional on latest Chrome, Safari, Edge, and Firefox (desktop + mobile) with no critical bugs.
- Accessibility audit passes WCAG 2.1 AA for planner and viewer experiences.
- P90 processing latency validated under load with realistic menu sets.
- Analytics dashboards operational, covering OKRs and funnel metrics.
- Support documentation and on-call runbooks updated for web workflows.
- Privacy review complete with documented data retention and deletion policies.
